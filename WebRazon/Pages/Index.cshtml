@page
@model IndexModel
@{
    ViewData["Title"] = "Lista de Tareas";
}

<link rel="stylesheet" href="~/css/custom-task-pages.css" />
<link rel="stylesheet" href="~/css/modal-notifications.css" />

<style>
    .tasks-filter {
        position: relative;
    }
    
    .filter-button {
        background-color: var(--purple-400);
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: 0.875rem;
    }
    
    .filter-button i {
        margin-right: 5px;
    }
    
    .filter-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        z-index: 1000;
        background-color: white;
        border-radius: 4px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        min-width: 160px;
        display: none;
        padding: 8px 0;
        border: 1px solid var(--green-200);
    }
    
    .filter-dropdown.show {
        display: block;
    }
    
    .filter-dropdown a {
        display: block;
        padding: 8px 16px;
        color: var(--text-dark);
        text-decoration: none;
        transition: background-color 0.2s;
    }
    
    .filter-dropdown a:hover {
        background-color: var(--green-100);
    }
    
    .status-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 4px;
        color: white;
        font-size: 0.75rem;
        font-weight: 500;
    }
    
    .status-badge.pending {
        background-color: var(--purple-400);
    }
    
    .status-badge.progress {
        background-color: var(--green-500);
    }
    
    .status-badge.urgent {
        background-color: var(--urgente-500);
        color: var(--text-dark);
    }
    
    .status-badge.completed {
        background-color: var(--pastel-mint-500);
    }
</style>

<div class="tasks-page">
    <div class="page-header">
        <h1 class="page-title" style="color: var(--purple-600);">
            Lista de Tareas
        </h1>
        <button class="new-task-btn" style="background-color: var(--purple-500); color: white;" data-modal-target="nuevaTareaModal">
            <i class="bi bi-plus-circle"></i> Nueva Tarea
        </button>
    </div>

    <div class="tasks-card" style="border-color: var(--purple-200);">
        <div class="tasks-card-header" style="background-color: var(--purple-400); color: var(--text-light);">
            <span><i class="bi bi-list-task"></i>Mis Tareas</span>
            <div class="tasks-filter">
                <button class="filter-button" id="filterButton">
                    <i class="bi bi-funnel"></i> Filtrar
                </button>
                <div class="filter-dropdown" id="filterDropdown">
                    <a href="#" class="filter-link" data-filter="todas">Todas</a>
                    <a href="#" class="filter-link" data-filter="Pendiente">Pendientes</a>
                    <a href="#" class="filter-link" data-filter="En Progreso">En Progreso</a>
                    <a href="#" class="filter-link" data-filter="Urgente">Urgentes</a>
                    <a href="#" class="filter-link" data-filter="Completada">Completadas</a>
                </div>
            </div>
        </div>
        <div class="tasks-card-body" style="background-color: white;">
            <table class="tasks-table" id="tasksTable">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Fecha de Vencimiento</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tarea in Model.Tareas)
                    {
                        <tr class="task-row" data-task-id="@tarea.IdTarea" data-task-status="@tarea.Estado">
                            <td>@tarea.NombreTarea</td>
                            <td>@tarea.FechaVencimiento.ToString("yyyy-MM-dd")</td>
                            <td>
                                <span class="status-badge @(tarea.Estado == "Urgente" ? "urgent" : 
                                                          tarea.Estado == "En Progreso" ? "progress" : 
                                                          tarea.Estado == "Completada" ? "completed" : "pending")">
                                    @tarea.Estado
                                </span>
                            </td>
                            <td>
                                <div class="actions-group">
                                    <button class="btn btn-sm btn-outline-primary btn-edit-task" title="Editar" 
                                            data-task-id="@tarea.IdTarea" data-modal-target="editarTareaModal">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger btn-delete-task" title="Eliminar" 
                                            data-task-id="@tarea.IdTarea">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Nueva Tarea -->
<div id="nuevaTareaModal" class="modal-overlay">
    <div class="modal" style="max-width: 500px;">
        <div class="modal-header" style="background-color: var(--purple-300);">
            <h2 class="modal-title"><i class="bi bi-plus-circle"></i> Agregar Nueva Tarea</h2>
            <button type="button" class="modal-close" data-modal-close="nuevaTareaModal">&times;</button>
        </div>
        <div class="modal-body">
            <form id="newTaskForm">
                <div class="detail-group">
                    <label class="detail-label" for="taskName">Nombre de la Tarea</label>
                    <input id="taskName" name="NombreTarea" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required />
                    <div class="invalid-feedback" style="color: red; font-size: 0.8rem; margin-top: 5px; display: none;">El nombre es obligatorio</div>
                </div>
                <div class="detail-group">
                    <label class="detail-label" for="taskDueDate">Fecha de Vencimiento</label>
                    <input id="taskDueDate" name="FechaVencimiento" type="date" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required />
                    <div class="invalid-feedback" style="color: red; font-size: 0.8rem; margin-top: 5px; display: none;">La fecha de vencimiento es obligatoria</div>
                </div>
                <div class="detail-group">
                    <label class="detail-label" for="taskStatus">Estado</label>
                    <select id="taskStatus" name="Estado" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        <option value="Pendiente">Pendiente</option>
                        <option value="En Progreso">En Progreso</option>
                        <option value="Urgente">Urgente</option>
                        <option value="Completada">Completada</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary btn-cancel-modal" data-modal-close="nuevaTareaModal">
                <i class="bi bi-x-circle"></i> Cancelar
            </button>
            <button type="button" id="btnSaveTask" class="btn" style="background-color: var(--purple-500); color: white;">
                <i class="bi bi-plus-lg"></i> Agregar Tarea
            </button>
        </div>
    </div>
</div>

<!-- Modal para Editar Tarea -->
<div id="editarTareaModal" class="modal-overlay">
    <div class="modal" style="max-width: 500px;">
        <div class="modal-header" style="background-color: var(--purple-300);">
            <h2 class="modal-title"><i class="bi bi-pencil-square"></i> Editar Tarea</h2>
            <button type="button" class="modal-close" data-modal-close="editarTareaModal">&times;</button>
        </div>
        <div class="modal-body">
            <form id="editTaskForm">
                <input type="hidden" id="editTaskId" name="IdTarea" />
                <div class="detail-group">
                    <label class="detail-label" for="editTaskName">Nombre de la Tarea</label>
                    <input id="editTaskName" name="NombreTarea" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required />
                    <div class="invalid-feedback" style="color: red; font-size: 0.8rem; margin-top: 5px; display: none;">El nombre es obligatorio</div>
                </div>
                <div class="detail-group">
                    <label class="detail-label" for="editTaskDueDate">Fecha de Vencimiento</label>
                    <input id="editTaskDueDate" name="FechaVencimiento" type="date" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required />
                    <div class="invalid-feedback" style="color: red; font-size: 0.8rem; margin-top: 5px; display: none;">La fecha de vencimiento es obligatoria</div>
                </div>
                <div class="detail-group">
                    <label class="detail-label" for="editTaskStatus">Estado</label>
                    <select id="editTaskStatus" name="Estado" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        <option value="Pendiente">Pendiente</option>
                        <option value="En Progreso">En Progreso</option>
                        <option value="Urgente">Urgente</option>
                        <option value="Completada">Completada</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary btn-cancel-modal" data-modal-close="editarTareaModal">
                <i class="bi bi-x-circle"></i> Cancelar
            </button>
            <button type="button" id="btnUpdateTask" class="btn" style="background-color: var(--purple-500); color: white;">
                <i class="bi bi-save"></i> Guardar Cambios
            </button>
        </div>
    </div>
</div>

<!-- Contenedor para notificaciones -->
<div class="notifications-container" id="notificationsContainer"></div>

<form id="__AjaxAntiForgeryForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script src="~/js/modal-handler.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Botón de filtro
            const filterButton = document.getElementById('filterButton');
            const filterDropdown = document.getElementById('filterDropdown');
            
            // Toggle dropdown de filtro
            filterButton.addEventListener('click', function(event) {
                event.stopPropagation();
                filterDropdown.classList.toggle('show');
            });
            
            // Cerrar dropdown al hacer clic fuera
            document.addEventListener('click', function(event) {
                if (!filterButton.contains(event.target) && !filterDropdown.contains(event.target)) {
                    filterDropdown.classList.remove('show');
                }
            });
            
            // Filtrar tareas
            document.querySelectorAll('.filter-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    filterDropdown.classList.remove('show');
                    const filter = this.getAttribute('data-filter');
                    filterTasks(filter);
                    filterButton.innerHTML = `<i class="bi bi-funnel"></i> ${filter === 'todas' ? 'Filtrar' : filter}`;
                });
            });
            
            function filterTasks(filter) {
                const rows = document.querySelectorAll('#tasksTable tbody tr');
                
                rows.forEach(row => {
                    const status = row.getAttribute('data-task-status');
                    
                    if (filter === 'todas' || status === filter) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }
            
            // Editar tarea - Cargar datos
            document.querySelectorAll('.btn-edit-task').forEach(btn => {
                btn.addEventListener('click', function() {
                    const taskId = parseInt(this.getAttribute('data-task-id'));
                    loadTaskForEditing(taskId);
                });
            });
            
            async function loadTaskForEditing(taskId) {
                try {
                    const response = await fetch(`?handler=TareaPorId&id=${taskId}`);
                    
                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            const tarea = data.tarea;
                            
                            // Rellenar el formulario de edición
                            document.getElementById('editTaskId').value = tarea.idTarea;
                            document.getElementById('editTaskName').value = tarea.nombreTarea;
                            document.getElementById('editTaskDueDate').value = tarea.fechaVencimiento.split('T')[0];
                            document.getElementById('editTaskStatus').value = tarea.estado;
                        }
                    } else {
                        showCustomNotification('Error al cargar los datos de la tarea', 'danger');
                    }
                } catch (error) {
                    console.error('Error al cargar la tarea:', error);
                    showCustomNotification('Error al cargar los datos de la tarea', 'danger');
                }
            }
            
            // Guardar nueva tarea
            document.getElementById('btnSaveTask').addEventListener('click', async () => {
                // Validar formulario
                const nombre = document.getElementById('taskName').value.trim();
                const fechaVencimiento = document.getElementById('taskDueDate').value;
                const estado = document.getElementById('taskStatus').value;
                
                if (!nombre) {
                    document.getElementById('taskName').nextElementSibling.style.display = 'block';
                    return;
                }
                
                if (!fechaVencimiento) {
                    document.getElementById('taskDueDate').nextElementSibling.style.display = 'block';
                    return;
                }
                
                // Deshabilitar botón mientras se procesa
                const btnSaveTask = document.getElementById('btnSaveTask');
                btnSaveTask.disabled = true;
                btnSaveTask.innerHTML = '<span class="spinner"></span> Guardando...';
                
                try {
                    const nuevaTarea = {
                        nombreTarea: nombre,
                        fechaVencimiento: fechaVencimiento,
                        estado: estado
                    };
                    
                    const response = await fetch('?handler=AgregarTarea', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify(nuevaTarea)
                    });
                    
                    if (response.ok) {
                        closeModal('nuevaTareaModal');
                        showCustomNotification('Tarea agregada correctamente', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showCustomNotification('Error al guardar la tarea', 'danger');
                    }
                } catch (error) {
                    console.error('Error al guardar la tarea:', error);
                    showCustomNotification('Error al guardar la tarea', 'danger');
                } finally {
                    btnSaveTask.disabled = false;
                    btnSaveTask.innerHTML = '<i class="bi bi-plus-lg"></i> Agregar Tarea';
                }
            });
            
            // Actualizar tarea
            document.getElementById('btnUpdateTask').addEventListener('click', async () => {
                // Validar formulario
                const id = parseInt(document.getElementById('editTaskId').value);
                const nombre = document.getElementById('editTaskName').value.trim();
                const fechaVencimiento = document.getElementById('editTaskDueDate').value;
                const estado = document.getElementById('editTaskStatus').value;
                
                if (!nombre) {
                    document.getElementById('editTaskName').nextElementSibling.style.display = 'block';
                    return;
                }
                
                if (!fechaVencimiento) {
                    document.getElementById('editTaskDueDate').nextElementSibling.style.display = 'block';
                    return;
                }
                
                // Deshabilitar botón mientras se procesa
                const btnUpdateTask = document.getElementById('btnUpdateTask');
                btnUpdateTask.disabled = true;
                btnUpdateTask.innerHTML = '<span class="spinner"></span> Guardando...';
                
                try {
                    const tareaActualizada = {
                        idTarea: id,
                        nombreTarea: nombre,
                        fechaVencimiento: fechaVencimiento,
                        estado: estado
                    };
                    
                    const response = await fetch('?handler=ActualizarTarea', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify(tareaActualizada)
                    });
                    
                    if (response.ok) {
                        closeModal('editarTareaModal');
                        showCustomNotification('Tarea actualizada correctamente', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showCustomNotification('Error al actualizar la tarea', 'danger');
                    }
                } catch (error) {
                    console.error('Error al actualizar la tarea:', error);
                    showCustomNotification('Error al actualizar la tarea', 'danger');
                } finally {
                    btnUpdateTask.disabled = false;
                    btnUpdateTask.innerHTML = '<i class="bi bi-save"></i> Guardar Cambios';
                }
            });
            
            // Validación de formularios
            document.getElementById('taskName').addEventListener('input', function() {
                this.nextElementSibling.style.display = 'none';
            });
            
            document.getElementById('taskDueDate').addEventListener('input', function() {
                this.nextElementSibling.style.display = 'none';
            });
            
            document.getElementById('editTaskName').addEventListener('input', function() {
                this.nextElementSibling.style.display = 'none';
            });
            
            document.getElementById('editTaskDueDate').addEventListener('input', function() {
                this.nextElementSibling.style.display = 'none';
            });
            
            // Eliminar tarea
            document.querySelectorAll('.btn-delete-task').forEach(btn => {
                btn.addEventListener('click', function() {
                    const taskId = parseInt(this.getAttribute('data-task-id'));
                    if (confirm('¿Estás seguro de que quieres eliminar esta tarea?')) {
                        deleteTask(taskId);
                    }
                });
            });
            
            async function deleteTask(taskId) {
                try {
                    const row = document.querySelector(`.task-row[data-task-id="${taskId}"]`);
                    row.classList.add('removing');
                    
                    const response = await fetch(`?handler=EliminarTarea&id=${taskId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        }
                    });
                    
                    if (response.ok) {
                        setTimeout(() => {
                            row.remove();
                        }, 500);
                        showCustomNotification('Tarea eliminada correctamente', 'success');
                    } else {
                        showCustomNotification('Error al eliminar la tarea', 'danger');
                        row.classList.remove('removing');
                    }
                } catch (error) {
                    console.error('Error al eliminar la tarea:', error);
                    showCustomNotification('Error al eliminar la tarea', 'danger');
                }
            }
            
            // Función para mostrar notificaciones personalizadas
            function showCustomNotification(message, type = 'success') {
                const container = document.getElementById('notificationsContainer');
                
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                
                notification.innerHTML = `
                    <span>${message}</span>
                    <button type="button" class="notification-close">&times;</button>
                `;
                
                container.appendChild(notification);
                
                // Manejar el cierre de la notificación
                const closeBtn = notification.querySelector('.notification-close');
                closeBtn.addEventListener('click', function() {
                    notification.style.opacity = '0';
                    setTimeout(() => notification.remove(), 300);
                });
                
                // Auto-ocultar después de 3 segundos
                setTimeout(() => {
                    notification.style.opacity = '0';
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }
            
            // Inicializar fecha para nuevas tareas
            const today = new Date();
            const yyyy = today.getFullYear();
            let mm = today.getMonth() + 1;
            let dd = today.getDate();
            
            if (dd < 10) dd = '0' + dd;
            if (mm < 10) mm = '0' + mm;
            
            document.getElementById('taskDueDate').value = `${yyyy}-${mm}-${dd}`;
        });
    </script>
}
